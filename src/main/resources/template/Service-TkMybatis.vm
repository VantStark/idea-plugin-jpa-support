#if(!$package.isEmpty())
package $package;

#end
import static java.util.stream.Collectors.toList;

#if(!$tablesConfig.repositoryPackageName.isEmpty())
import ${tablesConfig.repositoryPackageName}.${table.repositoryName};
#end
#if(!$tablesConfig.entityPackageName.isEmpty())
import ${tablesConfig.entityPackageName}.${table.entityName};
#end
#if(!$tablesConfig.voPackageName.isEmpty())
import ${tablesConfig.voPackageName}.${entitySimpleName}VO;
import ${tablesConfig.voPackageName}.${entitySimpleName}UpdateVO;
import ${tablesConfig.voPackageName}.${entitySimpleName}QueryVO;
#end
#if(!$tablesConfig.dtoPackageName.isEmpty())
import ${tablesConfig.dtoPackageName}.${entitySimpleName}DTO;
#end
import java.util.Optional;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.Page;
import tk.mybatis.mapper.weekend.Weekend;
import javax.persistence.OptimisticLockException;

@Service
public class ${simpleName} {

    @Autowired
    private $repositoryName $repositoryVariableName;

    public $primaryKeyDataType save(${entitySimpleName}VO vo) {
        ${entitySimpleName} bean = new ${entitySimpleName}();
        BeanUtils.copyProperties(vo, bean);
        ${repositoryVariableName}.insert(bean);
        return bean.${table.primaryColumn.getterMethodName}();
    }

    public void delete($primaryKeyDataType id) {
        int affectRows = ${repositoryVariableName}.deleteByPrimaryKey(id);
        if (affectRows == 0) {
            throw new OptimisticLockException("Can't delete entity:" + id);
        }
    }

    public void update($primaryKeyDataType id, ${entitySimpleName}UpdateVO vo) {
        $entitySimpleName bean = requireOne(id);
        BeanUtils.copyProperties(vo, bean);
        int affectRows = ${repositoryVariableName}.updateByPrimaryKeySelective(bean);
        if (affectRows == 0) {
            throw new OptimisticLockException("Can't update entity:" + id);
        }
    }

    public ${entitySimpleName}DTO getById($primaryKeyDataType id) {
        ${entitySimpleName} original = requireOne(id);
        return toDTO(original);
    }

    public Page<${entitySimpleName}DTO> query(${entitySimpleName}QueryVO vo) {
        PageHelper.startPage(vo.getPageNum(), vo.getPageSize());
        Weekend<${entitySimpleName}> example = Weekend.of(${entitySimpleName}.class);
        example.weekendCriteria()
        #foreach($column in $table.columns)
            .andEqualTo(${entitySimpleName}::${column.getterMethodName}, vo.${column.getterMethodName}())
        #end
                ;
        Page<${entitySimpleName}> page = (Page<${entitySimpleName}>) ${repositoryVariableName}.selectByExample(example);

        Page<${entitySimpleName}DTO> targetPage = new Page<>(
            page.getPageNum(), page.getPageSize(), page.isCount(), page.getReasonable())
        );
        targetPage.setTotal(page.getTotal());
        targetPage.setPages(page.getPages());
        targetPage.setRecords(
            page.getResult()
                .stream()
                .map(this::toDTO)
                .collect(toList());
        );
        return targetPage;
    }

    private ${entitySimpleName}DTO toDTO(${entitySimpleName} original) {
        ${entitySimpleName}DTO bean = new ${entitySimpleName}DTO();
        BeanUtils.copyProperties(original, bean);
        return bean;
    }

    private ${entitySimpleName} requireOne($primaryKeyDataType id) {
        return Optional.ofNullable(${repositoryVariableName}.selectByPrimaryKey(id))
            .orElseThrow(() -> new NoSuchElementException("Resource not found: " + id));
    }
}
