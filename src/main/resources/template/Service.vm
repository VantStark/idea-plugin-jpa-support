#if(!$package.isEmpty())
package $package;

#end
#if(!$tablesConfig.repositoryPackageName.isEmpty())
import ${tablesConfig.repositoryPackageName}.${table.repositoryName};
#end
#if(!$tablesConfig.entityPackageName.isEmpty())
import ${tablesConfig.entityPackageName}.${table.entityName};
#end
#if(!$tablesConfig.voPackageName.isEmpty())
import ${tablesConfig.voPackageName}.${entitySimpleName}${tablesConfig.voSuffixName};
import ${tablesConfig.voPackageName}.${entitySimpleName}Update${tablesConfig.voSuffixName};
import ${tablesConfig.voPackageName}.${entitySimpleName}Query${tablesConfig.voSuffixName};
#end
#if(!$tablesConfig.dtoPackageName.isEmpty())
import ${tablesConfig.dtoPackageName}.${entitySimpleName}${tablesConfig.dtoSuffixName};
#end
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;

@Service
public class ${simpleName} {

    @Autowired
    private $repositoryName $repositoryVariableName;

    public $primaryKeyDataType save(${entitySimpleName}${tablesConfig.voSuffixName} ${tablesConfig.voSuffixVariableName}) {
        ${entitySimpleName} bean = new ${entitySimpleName}();
        BeanUtils.copyProperties(${tablesConfig.voSuffixVariableName}, bean);
        bean = ${repositoryVariableName}.save(bean);
        return bean.${table.primaryColumn.getterMethodName}();
    }

    public void delete($primaryKeyDataType id) {
        ${repositoryVariableName}.deleteById(id);
    }

    public void update($primaryKeyDataType id, ${entitySimpleName}Update${tablesConfig.voSuffixName} ${tablesConfig.voSuffixVariableName}) {
        $entitySimpleName bean = requireOne(id);
        BeanUtils.copyProperties(${tablesConfig.voSuffixVariableName}, bean);
        ${repositoryVariableName}.save(bean);
    }

    public ${entitySimpleName}${tablesConfig.dtoSuffixName} getById($primaryKeyDataType id) {
        ${entitySimpleName} original = requireOne(id);
        return to${tablesConfig.dtoSuffixName}(original);
    }

    public Page<${entitySimpleName}DTO> query(${entitySimpleName}Query${tablesConfig.voSuffixName} ${tablesConfig.voSuffixVariableName}) {
        throw new UnsupportedOperationException();
    }

    private ${entitySimpleName}${tablesConfig.dtoSuffixName} to${tablesConfig.dtoSuffixName}(${entitySimpleName} original) {
        ${entitySimpleName}${tablesConfig.dtoSuffixName} bean = new ${entitySimpleName}${tablesConfig.dtoSuffixName}();
        BeanUtils.copyProperties(original, bean);
        return bean;
    }

    private ${entitySimpleName} requireOne($primaryKeyDataType id) {
        return ${repositoryVariableName}.findById(id)
            .orElseThrow(() -> new java.util.NoSuchElementException("Resource not found: " + id));
    }
}
